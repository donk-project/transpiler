// START - Generated from type_registrar.cc.tmpl			
#include "{{$.TypeRegistrarInclude}}"			

#include <map>			
#include <string>			
#include <vector>			
#include <functional>			

#include "spdlog/spdlog.h"			

#include "donk/core/iota.h"			
#include "donk/core/vars.h"			
#include "donk/core/procs.h"			

{{- range $h := $.TypeIncludes}}
#include "{{$h}}"
{{- end }}			

namespace {{$.CoreNamespace}} {			

void RegisterAll(std::map<donk::path_t, std::vector<std::function<void(donk::iota_t&)>>>& collector) {			
  {{- range $p, $t := $.Parser.TypesByPath  }}			
    collector[donk::path_t("{{$p.FullyQualifiedString}}")].push_back({{ if $p.IsRoot -}}			
    &{{$.CoreNamespace}}{{$p.AsNamespace}}::Register);			
    {{- else -}}			
    &{{$.CoreNamespace}}::{{$p.AsNamespace}}::Register);			
    {{- end }}  			
  {{- end }}			
}			

} // namespace {{$.CoreNamespace}}			
// END - Generated from type_registrar.cc.tmpl